<?php

namespace Inamika\BackEndBundle\Repository;
use Inamika\BackEndBundle\Entity\Project;
use Inamika\BackEndBundle\Entity\Unit;
use Inamika\BackEndBundle\Entity\UnitStatus;
use Inamika\BackEndBundle\Entity\UnitType;
use Inamika\BackEndBundle\Entity\Currency;
use Inamika\BackEndBundle\Entity\Customer;
use Symfony\Component\Config\Definition\Exception\Exception;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

/**
 * UnitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UnitRepository extends \Doctrine\ORM\EntityRepository
{
    public $user;

    public function getAll(){
        $qb=$this->createQueryBuilder('e')
        ->select('e')
        ->join('e.project','project')
        ->join('e.status','status')
        ->join('e.customer','customer')
        ->join('e.type','type')
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->orderBy("e.id","DESC");
        if($this->user && $this->user->getRole()!='ROLE_SUPER'){
            $projects=[];
            foreach ($this->user->getProjects() as $key => $project) {
                $projects[]=$project->getId();
            }
            $qb->andWhere('e.project IN (:projects)');
            $qb->setParameter('projects',$projects);
        }
        return $qb;
    }
    
    public function getTotalByStatus($project){
        return $this->createQueryBuilder('e')
        ->select('COUNT(e) AS value,status.name as label,status.color as color')
        ->join('e.status','status')
        ->where('e.isDelete = :isDelete')
        ->andWhere('e.project=:project')
        ->setParameter('project',$project->getId())
        ->setParameter('isDelete',false)
        ->groupBy("e.status");
    }

    public function exportExcel($spreadsheet){
        $spreadsheet->getProperties()->setCreator("Urdapilleta")
            ->setLastModifiedBy("Urdapilleta")
            ->setTitle("Unidades Urdapilleta")
            ->setSubject("Unidades Urdapilleta")
            ->setDescription("Este documento contiene unidades de urdapilleta");
        $sheet = $spreadsheet->setActiveSheetIndex(0);
        
        $sheet->setCellValue('A1','Barrio')
            ->setCellValue('B1','Codigo de Lote') 
            ->setCellValue('C1','Numero de Lote')
            ->setCellValue('D1','Propietario')
            ->setCellValue('E1','Telefono')
            ->setCellValue('F1','Email')
            ->setCellValue('G1','Estado')
            ->setCellValue('H1','Tipo') 
            ->setCellValue('I1','Precio')
            ->setCellValue('J1','Moneda')
            ->setCellValue('K1','Metros Terreno') 
            ->setCellValue('L1','Metros Cubiertos')
            ->setCellValue('M1','Semicubiertos')
            ->setCellValue('N1','Dormitorios')
            ->setCellValue('O1','Orientación')
            ->setCellValue('P1','Plantas')
            ->setCellValue('Q1','Descripción')
            ->setCellValue('R1','Expensas')
            ->setCellValue('S1','Oportunidad')
            ->setCellValue('T1','Captación') 
            ->setCellValue('U1','Cliente o No');

        $data=$this->getAll()->orderBy("project.name","ASC")->getQuery()->getResult();
        $row=2;
        foreach ($data as $key => $d) {
            $isClient=Customer::IS_CLIENT_FALSE;
            $customer='';
            $phone='';
            $email='';
            $status=($d->getStatus())?$d->getStatus()->getName():'';
            $type=($d->getType())?$d->getType()->getName():'';
            $isOpportunity=($d->getIsOpportunity())?Unit::IS_OPPORTUNITY_TRUE:Unit::IS_OPPORTUNITY_FALSE;
            $type=($d->getType())?$d->getType()->getName():'';
            $currency=($d->getCurrencyPrice())?$d->getCurrencyPrice()->getCode():'';
            if($d->getCustomer()){
                $isClient=($d->getCustomer()->getIsCustomer())?Customer::IS_CLIENT_TRUE:Customer::IS_CLIENT_FALSE;
                $customer=$d->getCustomer()->getName();
                $phone=$d->getCustomer()->getPhone();
                $email=$d->getCustomer()->getEmail();
            }
            $spreadsheet->setActiveSheetIndex(0)
                ->setCellValue('A'.$row,$d->getProject()->getName())
                ->setCellValue('B'.$row,(String)$d->getCode()) 
                ->setCellValue('C'.$row,(String)$d->getName())
                ->setCellValue('D'.$row,(String)$customer)
                ->setCellValue('E'.$row,(String)$phone)
                ->setCellValue('F'.$row,(String)$email)
                ->setCellValue('G'.$row,(String)$status)
                ->setCellValue('H'.$row,(String)$type)
                ->setCellValue('I'.$row,(String)$d->getPrice())
                ->setCellValue('J'.$row,(String)$currency)
                ->setCellValue('K'.$row,(String)$d->getAreaGround()) 
                ->setCellValue('L'.$row,(String)$d->getAreaCovered())
                ->setCellValue('M'.$row,(String)$d->getAreaSemiCovered())
                ->setCellValue('N'.$row,(String)$d->getRooms())
                ->setCellValue('O'.$row,(String)$d->getOrientation())
                ->setCellValue('P'.$row,(String)$d->getFloors())
                ->setCellValue('Q'.$row,(String)$d->getDescription())
                ->setCellValue('R'.$row,(String)$d->getExpenses())
                ->setCellValue('S'.$row,(String)$isOpportunity)
                ->setCellValue('T'.$row,(String)$d->getCatchment())
                ->setCellValue('U'.$row,(String)$isClient)
                ;
            $row++;
        }
        foreach(range('A','U') as $columnID) {
            $spreadsheet->getActiveSheet()->getColumnDimension($columnID)->setAutoSize(true);
        }

        $spreadsheet->getActiveSheet()->setTitle('Unidades');
        $writer = new Xlsx($spreadsheet);
        $filename="uploads/Unidades_".date('Y_m_d_H_i_s').".xlsx";
        $writer->save($filename);
        return $filename;
    }

    public function importEXCEL($spreadsheet){
        $this->translate($this->readEXCEL($spreadsheet));
    }
    
    public function importCSV($spreadsheet){
        $this->translate($this->readCSV($spreadsheet));
    }

    protected function readEXCEL($spreadsheet)
    {
        $data = [];
        foreach ($spreadsheet->getWorksheetIterator() as $worksheet) {
            $worksheetTitle = $worksheet->getTitle();
            foreach ($worksheet->getRowIterator() as $row) {
                $rowIndex = $row->getRowIndex();
                $cellIterator = $row->getCellIterator();
                $cellIterator->setIterateOnlyExistingCells(false);
                foreach ($cellIterator as $cell) {
                    $data[$rowIndex][] = $cell->getCalculatedValue();                    
                }
            }
        }
        return $data;
    }

    protected function readCSV($file)
    {
        $data = [];
        if (($handle = fopen($file, "r")) !== FALSE) {
            $i=0;
            while (($row = fgetcsv($handle, null, ';')) !== FALSE) {
                $data[] = array_map("utf8_encode", $row);
            }
            fclose($handle);
        }
        return $data;
    }

    public function translate($data){
        $em = $this->getEntityManager();
        $currencyDefault=$em->getRepository(Currency::class)->findOneByIsDefault(true);
        foreach($data as $index=>$row){
            if ($index<=1) continue;
            // BARRIO
            if(!$project=$em->getRepository(Project::class)->findOneBy(array('name'=>$row[0],'isDelete'=>false)))
                throw new Exception("El emprendimiento '".$row[0]."' no existe para la fila ".$index, 1);
            //LOTE
            if(empty($row[1]))
                throw new Exception("La columna código no puede estar vacía para la fila ".$index, 1);
            if(!$unit=current($em->getRepository(Unit::class)->getUniqueNotDeleted(array('code'=>$row[1]))))
                $unit = new Unit();
            $unit->setIsDelete(false);
            $unit->setProject($project);
            //CÓDIGO DE UNIDAD
            $unit->setCode($row[1]);
            //NOMBRE DE LOTE
            $unit->setName($row[2]);
            //CLIENTE
            if(!$customer=current($em->getRepository(Customer::class)->getUniqueNotDeleted(array('email'=>$row[5]))))
                if(!$customer=$em->getRepository(Customer::class)->findOneByName(array('name'=>$row[3])))
                    $customer = new Customer();
            //NOMBRE
            if(!empty($row[3]))
                $customer->setName($row[3]);
            //TELÉFONO
            if(!empty($row[4]))
                $customer->setPhone($row[4]);
            //EMAIL
            if(!empty($row[5]))
                $customer->setEmail($row[5]);
            //ES CLIENTE
            $customer->setIsCustomer($row[20]==Customer::IS_CLIENT_TRUE);
            $em->persist($customer);
            $unit->setCustomer($customer);
            //ESTADO
            if(!$status=$em->getRepository(UnitStatus::class)->findOneBy(array('name'=>$row[6],'isDelete'=>false,'projectType'=>$project->getProjectType()->getId())))
                throw new Exception("El estado de  '".$row[6]."' no existe para la fila ".$index, 1);
            $unit->setStatus($status);
            //TIPO
            if(!$type=current($em->getRepository(UnitType::class)->getUniqueNotDeleted(array('name'=>$row[7]))))
                throw new Exception("El tipo de  '".$row[7]."' no existe para la fila ".$index, 1);
            $unit->setType($type);
            //PRECIO
            $unit->setPrice($row[8]);
            //MONEDA
            if(!$currencyPrice=$em->getRepository(Currency::class)->findOneByCode($row[9]))
                $currencyPrice=$currencyDefault;
            $unit->setCurrencyPrice($currencyPrice);
            //METROS TERRENO    
            $unit->setAreaGround($row[10]);
            //METROS CUBIERTOS
            $unit->setAreaCovered($row[11]);
            //METROS SEMI-CUBIERTOS
            $unit->setAreaSemiCovered($row[12]);
            //HABITACIONES
            $unit->setRooms($row[13]);
            //ORIENTACION
            $unit->setOrientation($row[14]);
            //PLANTAS
            $unit->setFloors($row[15]);
            //DESCRIPTION
            $unit->setDescription($row[16]);
            //EXPENSAS 
            $unit->setCurrencyExpenses($currencyDefault);
            $unit->setExpenses($row[17]);
            //ES OPORTUNIDAD
            $unit->setIsOpportunity($row[18]==Unit::IS_OPPORTUNITY_TRUE);
            //CAPTACION     
            $unit->setCatchment($row[19]);
            $em->persist($unit);
        }
        $em->flush();
    }
    public function search($query=null,$limit=0,$offset=0,$sort=null,$direction=null){
        if($limit>100) $limit=100;
        if($limit==0) $limit=30;
        $qb= $this->getAll()
        ->setFirstResult($offset)
        ->setMaxResults($limit);
        if($sort){
            if(strpos($sort, ".") === false)
                $sort='e.'.$sort;
            $qb->orderBy($sort,$direction);
        }else{
            $qb->orderBy("e.createdAt","DESC");
        }
        if($query){
            $words=explode(" ",$query);
            if(count($words)>1){
                foreach ($words as $key => $word) {
                    $queryString=array();
                    $queryString[]="CONCAT(COALESCE(e.name,''),COALESCE(customer.name,''),COALESCE(e.code,''),COALESCE(e.number,''),COALESCE(project.name,''),COALESCE(status.name,''),COALESCE(type.name,'')) LIKE :word".$key;
                    $qb->setParameter('word'.$key,"%".$word."%");
                    $qb->andWhere(join(' AND ',$queryString));
                }
            }else{
                $qb->andWhere("CONCAT(COALESCE(e.name,''),COALESCE(customer.name,''),COALESCE(e.code,''),COALESCE(e.number,''),COALESCE(project.name,''),COALESCE(status.name,''),COALESCE(type.name,'')) LIKE :query")->setParameter('query',"%".$query."%");
            }
        }
        return $qb;
    }

    public function searchTotal($query=null,$limit=0,$offset=0){
        $resultTotal=$this->search($query,$limit=0,$offset=0)
        ->setFirstResult(null)
        ->select('COUNT(e.id) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }
   
    public function total(){
        $resultTotal=$this->search()
        ->setFirstResult(null)
        ->select('COUNT(e.id) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }


    public function getUniqueNotDeleted(array $parameters){
        return $this->createQueryBuilder('e')
        ->select('e')
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->andWhere('e.code= :code')
        ->setParameter('code',$parameters['code'])
        ->setMaxResults(1)->getQuery()->getResult();
    }
}
