<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="{{ asset('bundles/inamikabackoffice/plugins/scrollbooster/dist/scrollbooster.min.js') }}"></script>
{% set sizeIcon = "40" %}
{% if mode == 'DRAG'%}
{% endif %}
<script>

    {% if mode == 'VIEW' %}
        var viewport = document.querySelector('.scrollbooster-viewport');
        var content = document.querySelector('.scrollbooster-content');
        var image = document.querySelector('#containment-wrapper');
        const sb = new ScrollBooster({
            viewport,
            content,
            scrollMode: 'transform',
            emulateScroll: false
        });        
    {% endif %}
    var fixmeTop = $('.fixme').offset().top;
    $(window).scroll(function() {  
        var currentScroll = $(window).scrollTop(); 
        if ((currentScroll + 75) >= fixmeTop) { 
            $('.fixme').css({
                position: 'fixed',
                top: '75px',
            });
        } else {
            $('.fixme').css({
                position: 'static'
            });
        }
    });
    var units=[];
    var zoomVal=100;
    var stepPercent=10;
    var unitSelect=null;
    var filterStatus=[];
    var filterType=[];
    var lastPosition=[100,150];
    function addUnits(){
        $('#modalUnit').modal('show');
        $('#modalUnit .modal-title').html('{{ 'ADD_UNIT' | trans }}');
        $('#modalUnit .modal-body').html(getSpin());
        $('#modalUnit').modal('show');
        $.ajax({
            url: '{{ path('inamika_backoffice_units_add')}}?disableLayout=1',
            type: 'GET',
            crossDomain: true,
            success: function(data) {
                $('#modalUnit .modal-body').html(data);  
                $("form.sendToApi" ).ajaxForm({
                    dataType:'json',
                    beforeSubmit: showRequest
                });
                $(".combobox").combobox();
                $("#toggle").on("click", function() {
                    $(".combobox").toggle();
                });
            }
        });
    }

    function showMessageUnSelected(){
        $.toast({
            heading: '{{ 'WARNING' | trans }}',
            text: 'Debe seleccionar una unidad para realizar esta acci√≥n',
            position: 'top-right',
            icon: 'warning',
            hideAfter: 3000, 
            stack: 6
        });
    }

    function editUnit(){
        if(unitSelect){
            $('#modalUnit').modal('show');
            $('#modalUnit .modal-title').html('{{ 'EDIT_UNIT' | trans }}');
            $('#modalUnit .modal-body').html(getSpin());
            $('#modalUnit').modal('show');
            var url='{{ path('inamika_backoffice_units_edit',{ id: ':ENTITY_ID' })}}?disableLayout=1';
            $.ajax({
                url: url.replace(':ENTITY_ID',unitSelect.id),
                type: 'GET',
                crossDomain: true,
                success: function(data) {
                    $('#modalUnit .modal-body').html(data);  
                    $("form.sendToApi" ).ajaxForm({
                        dataType:'json',
                        beforeSubmit: showRequest
                    });
                    $(".combobox").combobox();
                    $("#toggle").on("click", function() {
                        $(".combobox").toggle();
                    });
                }
            });
        }else
            showMessageUnSelected();
    }
    
    function selectUnit(index){
        unitSelect=units[index];
        {% if mode == 'DRAG'%}
        $(".btnSelected").removeClass("disabled").attr('disabled',false);
        {% endif %}
        {% if mode == 'VIEW'%}
            modalLanding_inamika_backoffice_units.show(unitSelect.name,unitSelect.id);
        {% endif %}
    }
    
    function unselectUnit(){
        unitSelect=null;
        $(".btnSelected").addClass("disabled").attr('disabled',true);
    }
    
    
    function removePosition(){
        {% if mode == 'DRAG'%}
        if(unitSelect){
            loadingMap.show();
            setPosition(unitSelect.id,null,null);
            $("div[attr-id='"+unitSelect.id+"']").remove();
            unselectUnit();
        }
        else
            showMessageUnSelected();
        {% endif %}
    }
    
    function setPosition(unitId,x,y){
         {% if mode == 'DRAG'%}
            var url='{{ path('api_units_position',{ id: ':ENTITY_ID' })}}';
            var data={
                x: x,
                y: y,
                zoom: zoomVal,
                step: stepPercent
            }
            $.ajax({
                url: url.replace(':ENTITY_ID',unitId),
                type: 'PUT',
                data:JSON.stringify(data),
                crossDomain: true,
                success: function(data) {
                    $.toast({
                        heading: '{{ 'SUCCESS' | trans }}',
                        text: 'La posicion fue guardada correctamente',
                        position: 'top-right',
                        icon: 'success',
                        hideAfter: 1000, 
                        stack: 8
                    });
                    if(x==null && y==null){
                        loadUnits();
                    }else{
                        loadingMap.hide();
                    }
                },  
                complete:function(){
                    loadingMap.hide();
                },
                error: function(data, status, error) {
                    loadingMap.hide();
                }
            });    
        {% endif %}
    }

    var loadingMap={
        show: function (text){
            $("#loading-map").fadeIn();
            return true;
        },
        hide: function (){
            $("#loading-map").fadeOut();
            return true;
        }
    }
    function getMarker(index){
        icon=(typeof units[index].type == 'undefined' || units[index].type == null)?'{{ constant('Inamika\\BackEndBundle\\Entity\\UnitType::DEFAULT_ICON') }}':units[index].type.icon;
        return `<div data-toggle="tooltip" data-placement="top" title="${units[index].name}" data-unit="${index}" attr-status="${units[index].status.id}" attr-type="${units[index].type.id}" attr-index="${index}" attr-id="${units[index].id}" class="marker-map-draggable position-absolute text-center" style="top:${units[index].svgY}px;left:${units[index].svgX}px;">
                {# <div class="label" style="position:absolute;background-color:#F00;left: -50px;top: -80px; width:100px; text-align:center;">${units[index].name}</div> #}
                <div style="width: {{ sizeIcon }}px;top: -{{ sizeIcon / 2 }}px;position: absolute;height: {{ sizeIcon }}px;
                text-align: center;
                left: -{{ sizeIcon / 2 }}px;"><i attr-index="0" style="color: ${units[index].status.color};" class="${icon} fa-2x"></i></div>
            </div>`
        }

    function renderUnits(){
        var htmlList='';
        var htmlMap='<img id="containment-wrapper" src="{{ asset('uploads/or/' ~ entity.map) }}">';
        var count=0;
        for(var i=0; i<units.length; i++){
            if(units[i].svgX == null && units[i].svgY == null  ){
                count++;
                icon=(typeof units[i].type == 'undefined' || units[i].type == null)?'{{ constant('Inamika\\BackEndBundle\\Entity\\UnitType::DEFAULT_ICON') }}':units[i].type.icon;
                htmlList+=`<a id="link-${i}" href="javascript:newMapMarker(${i})" class="list-group-item"><i style="color: ${units[i].status.color};" class="${icon}" !important"></i> <small>${units[i].name}</small></a>`;
            }else{
                htmlMap+=getMarker(i);
            }
        }
        if(count==0)
            htmlList='<p>No existen unidades sin ubicar</p>';
        $("#list-units").html(htmlList);
        $("#map-container").html(htmlMap);
        loadingMap.hide();
        loadDraggable();
    }

    function filter(){
        $("div.marker-map-draggable").each(function() {
            if(filterStatus.indexOf($(this).attr('attr-status'))==-1 || filterType.indexOf($(this).attr('attr-type'))==-1)
                $(this).fadeOut('fast');
            else
                $(this).fadeIn('fast');
        });
    }
    
    function loadUnits(){
        $("#list-units").html(getSpin());
        loadingMap.show();
        $.ajax({
            url: '{{ path('api_projects_units',{ id: entity.id })}}',
            type: 'GET',
            crossDomain: true,
            success: function(data) {
                units=data;
                renderUnits();
                {% if mode == 'VIEW'%}
                    filter();
                {% endif %}
            },  
            complete:function(){
                
            },
            error: function(data, status, error) {
                
            }
        });            
    }

    function beforeSuccess(){
        $('form').trigger("reset");
        $('#modalUnit').modal('hide');
        loading.hide();
        loadUnits();
        $.toast({
            heading: '{{ 'SUCCESS' | trans }}',
            text: '{{ 'THE_CHANGES_WERE_SAVED' | trans }}',
            position: 'top-right',
            icon: 'success',
            hideAfter: 3000, 
            stack: 6
        });
    }
    function cancell(){
        $('#modalUnit').modal('hide');
    }
    function newMapMarker(i){
        units[i].svgX=lastPosition[0];
        units[i].svgY=lastPosition[1];
        $('#link-'+i).remove();
        $('#map-container').prepend(getMarker(i));
        loadDraggable();
    }

    function loadDraggable(){
        $( document ).tooltip({
            position: {
                my: "center bottom-20",
                at: "center top",
                using: function( position, feedback ) {
                $( this ).css( position );
                $( "<div>" )
                    .addClass( "arrow" )
                    .addClass( feedback.vertical )
                    .addClass( feedback.horizontal )
                    .appendTo( this );
                }
            },
            content: function() {
                var element = $( this );
                if ( element.is( "[data-unit]" ) ) {
                    var unit = units[$( this ).data('unit')];
                    let price=(unit.price)?`<h4>${unit.currencyPrice.code} ${unit.price}</h4>`:``;
                    let customer=(unit.customer)?`<h4>${unit.customer.name}</h4>`:``;
                    return `
                        <div class="text-center p-20">
                            <h3>${unit.name}</h3>
                            ${customer}
                            ${price}
                            <h5><span class="badge badge-pill text-white" style="background-color:${unit.status.color}">${unit.status.name}</span></h5>
                        </div>`;
                }
                if ( element.is( "[title]" ) ) {
                    return element.attr( "title" );
                }
            }
        });
        {% if mode == 'DRAG'%}
        $(".marker-map-draggable").draggable({
            containment: "#containment-wrapper", scroll: true,
            stop: function () {
                loadingMap.show();
                let left=parseFloat($(this).css("left").replace('px',''));
                let top=parseFloat($(this).css("top").replace('px',''));
                lastPosition=[left+50,top+75];
                setPosition(units[$(this).attr("attr-index")].id,left,top)
            },
            start: function () {
                
            }
        });
        {% endif  %}
        $(".marker-map-draggable").on('click',function (e){
            selectUnit($(this).attr("attr-index"));
            e.stopPropagation();
        });
    }
    $(function (){
        loadUnits();
        loadDraggable();
        
        $('[data-toggle="tooltip"]').tooltip();
        $("html").click(function() {
            unselectUnit();
        });
        $("#filterStatus").on("changed.bs.select",function(e, clickedIndex, newValue, oldValue) {
            filterStatus= $(e.currentTarget).val();
            filter();
        });
        $("#filterType").on("changed.bs.select",function(e, clickedIndex, newValue, oldValue) {
            filterType= $(e.currentTarget).val();
            filter();
        });
        
        {% if mode == 'VIEW'%}
            var offsetX = image.scrollWidth - viewport.offsetWidth;
            var offsetY = image.scrollHeight - viewport.offsetHeight;
            sb.setPosition({
                x: offsetX / 2,
                y: offsetY / 2
            });
            {% for status in unitStatus %}
                {% if status.isDefault %}
                    filterStatus.push('{{ status.id }}');
                {% endif %}
            {% endfor %}
            {% for type in unitType %}
                {% if type.isDefault %}
                    filterType.push('{{ type.id }}');
                {% endif %}
            {% endfor %}
        {% endif %}
        {% if mode == 'DRAG'%}
           
        {% endif %}
    });

    function zoom(direction){
        
        if((zoomVal + stepPercent*direction ) >= 50 && (zoomVal + stepPercent*direction )<= 150 ){
            zoomVal+=(stepPercent*direction);
            var current=$("#containment-wrapper").css("width");
            var step=(stepPercent*parseInt(current))/100;
            $("#containment-wrapper").css("width",parseInt(current)+(step * direction)+"px");
            
            $("div.marker-map-draggable").each(function() {
                let currentTop=$(this).css("top");
                let currentLeft=$(this).css("left");
                var stepTop=(stepPercent*parseInt(currentTop))/100;
                var stepLeft=(stepPercent*parseInt(currentLeft))/100;
                let newTop=parseFloat(currentTop)+(stepTop * direction);
                let newLeft=parseFloat(currentLeft)+(stepLeft * direction);
                $(this).css("left",newLeft+"px");
                $(this).css("top",newTop+"px");
            });
            {% if mode == 'VIEW'%}
                sb.updateMetrics();
                $("#scrollbooster-viewport").css('height',parseFloat($("#containment-wrapper").css("height"))+20+"px");
            {% else %}
                $("#map-container").css('height',parseFloat($("#containment-wrapper").css("height"))+20+"px");
                $("#list-units").css('height',parseFloat($("#containment-wrapper").css("height"))-18+"px");
            {% endif %}
        }
    }
</script>